version: '3.8'

services:
  # Redis - Message broker for Celery (production configuration)
  redis:
    image: redis:7.2-alpine
    container_name: proscrape_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - proscrape_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    sysctls:
      net.core.somaxconn: 1024
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # FastAPI Application (production ready)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: proscrape_api_prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-proscrape}
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - PRODUCTION=true
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - proscrape_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Worker - Optimized for high-throughput scraping
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: proscrape_worker_prod
    restart: unless-stopped
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-proscrape}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - CELERY_CONCURRENCY=4
      - PRODUCTION=true
      - SS_COM_ENABLED=true
      - CITY24_ENABLED=false
      - PP_LV_ENABLED=false
    command: >
      celery -A tasks.celery_app worker 
      --loglevel=info 
      --concurrency=4
      --max-tasks-per-child=50
      --time-limit=7200
      --soft-time-limit=6000
      --queues=scraping
      --prefetch-multiplier=1
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - /tmp:/tmp
    networks:
      - proscrape_net
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "celery", "-A", "tasks.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s

  # Celery Beat - Production scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: proscrape_beat_prod
    restart: unless-stopped
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-proscrape}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - PRODUCTION=true
    command: >
      celery -A tasks.celery_app beat 
      --loglevel=info
      --pidfile=/tmp/celerybeat.pid
      --schedule=/tmp/celerybeat-schedule
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - celery_beat_data_prod:/tmp
    networks:
      - proscrape_net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Flower - Production monitoring with authentication
  flower:
    image: mher/flower:2.0
    container_name: proscrape_flower_prod
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-proscrape2025}
      - FLOWER_PORT=5555
      - FLOWER_PERSISTENT=True
      - FLOWER_DB=/data/flower.db
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - flower_data_prod:/data
    networks:
      - proscrape_net
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log aggregation service
  logspout:
    image: gliderlabs/logspout:latest
    container_name: proscrape_logspout
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs:/mnt/logs
    command: syslog://localhost:514
    networks:
      - proscrape_net
    profiles:
      - monitoring

  # System monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: proscrape_cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - proscrape_net
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  redis_data_prod:
    driver: local
  celery_beat_data_prod:
    driver: local
  flower_data_prod:
    driver: local

# Networks
networks:
  proscrape_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16