name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - 'models/**'
      - 'utils/**'
      - 'tasks/**'
      - 'spiders/**'
      - 'docker/**'
      - 'requirements.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'models/**'
      - 'utils/**'
      - 'tasks/**'
      - 'spiders/**'
      - 'docker/**'
      - 'requirements.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_WORKER: ${{ github.repository }}/worker

jobs:
  # Lint and test Python code
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7-jammy
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Install Playwright
      run: |
        python -m playwright install chromium
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/proscrape_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        LOG_LEVEL: DEBUG
      run: |
        pytest tests/ -v --cov=api --cov=models --cov=utils --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build and test Docker images
  build:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        service: [api, worker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.${{ matrix.service }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  # Integration tests with Docker Compose
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create environment file
      run: |
        cat > .env << EOF
        MONGODB_URL=mongodb://admin:password@mongodb:27017/proscrape_test?authSource=admin
        REDIS_URL=redis://redis:6379
        LOG_LEVEL=DEBUG
        API_DEBUG=true
        CORS_ORIGINS=*
        DOWNLOAD_DELAY=0.5
        SS_ENABLED=true
        CITY24_ENABLED=true
        PP_ENABLED=true
        EOF
    
    - name: Build and start services
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml up -d
    
    - name: Wait for services to be ready
      run: |
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
        # Wait for Flower to be ready
        timeout 60s bash -c 'until curl -f http://localhost:5555/api/workers; do sleep 2; done'
    
    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/stats
        curl -f http://localhost:8000/listings?limit=1
        
        # Test Celery workers
        curl -f http://localhost:5555/api/workers
    
    - name: Run database seed test
      run: |
        docker-compose exec -T api python scripts/seed_data.py 5
        docker-compose exec -T api python scripts/validate_data.py
    
    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose logs api
        docker-compose logs celery_worker
        docker-compose logs mongodb
        docker-compose logs redis
    
    - name: Clean up
      if: always()
      run: |
        docker-compose down -v

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [api, worker]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Deploy to staging (optional)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.proscrape.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Or: docker-compose -f docker-compose.staging.yml up -d
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests for staging environment

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, integration-test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://proscrape.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Or: docker-compose -f docker-compose.prod.yml up -d
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke tests for production environment
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Production deployment completed with status: ${{ job.status }}"
        # Add notification logic (Slack, email, etc.)